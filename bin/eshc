#!/usr/bin/awk -f

BEGIN {
    TEMPLATE_BEGIN = "<%[- ]"
    TEMPLATE_END   = "[ -]%>"
    TEMPLATE_ESCAPE[TEMPLATE_BEGIN] = "<%%"
    TEMPLATE_ESCAPE[TEMPLATE_END]   = "%%>"
}

function quote(text) {
    gsub("'", "'\\''", text)
    return "'" text "'"
}

function emit_text(text) {
    if (length(text))
        print "printf \"%s\" " quote(text)
}

function emit_newline() {
    print "echo"
}

function emit_code(code) {
    if (MATCH["end-op"] == "-") {
        code = "printf \"%s\" \"$(" code ")\""
    }
    print code
}

function match_directive(text) {
    MATCH["start"]      = match(text, TEMPLATE_BEGIN)
    MATCH["start-skip"] = RLENGTH > 0 ? RLENGTH : 0
    MATCH["start-op"]   = substr(text, RSTART, RLENGTH)
    MATCH["start-op"]   = substr(MATCH["start-op"], length(MATCH["start-op"]))
    MATCH["end"]        = match(text, TEMPLATE_END)
    MATCH["end-skip"]   = RLENGTH > 0 ? RLENGTH : 0
    MATCH["end-op"]     = substr(text, RSTART, 1)

    MATCH["length"] = MATCH["end"] - (MATCH["start"] + MATCH["start-skip"])

    return MATCH["start"] && MATCH["end"]
}

function extract_prematch(text) {
    result = substr(text, 1, MATCH["start"] - 1)
    if (MATCH["start-op"] == "-") {
        # strip trailing whitespace on prematch
        sub(/[[:blank:]]*$/, "", result)
    }

    return result
}

function extract_match(text) {
    return substr(text, MATCH["start"] + MATCH["start-skip"], MATCH["length"])
}

function extract_postmatch(text) {
    return substr(text, MATCH["end"] + MATCH["end-skip"])
}

function unescape(text) {
    for (replacement in TEMPLATE_ESCAPE) {
        gsub(TEMPLATE_ESCAPE[replacement],
             replacement,
             text)
    }

    return text
}

{ match_directive($0) }

MATCH["length"] <= 0 {
    emit_text($0)
    emit_newline()
}

MATCH["length"] > 0 {
    text = $0
    found = 1

    while (found) {
        emit_text(extract_prematch(text))
        emit_code(unescape(extract_match(text)))
        text = extract_postmatch(text)
        found = match_directive(text)
    }

    if (length(text)) {
        emit_text(text)
        emit_newline();
    }
}
